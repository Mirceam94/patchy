---

  # System operations
  - :name: "No operation"
    :mnemonic: "nop"
    :op: 0x00

  - :name: "Halt"
    :mnemonic: "hlt"
    :op: 0xff

  # Memory operations
  - :name: "Move Rd into Rs"
    :desc: "Rd -> Rs"
    :mnemonic: "mov"
    :op: 0x01
    :args:
      - :type: register
        :name: "destination"

      - :type: register
        :name: "source"

  - :name: "Load immediate into Rd"
    :desc: "I -> Rd"
    :mnemonic: "ldi"
    :op: 0x02
    :args:
      - :type: register
        :name: "destination"

      - :type: immediate
        :name: "immediate"

  - :name: "Load RAM[DP] into Rd"
    :desc: "RAM[DP] -> Rd"
    :mnemonic: "ldm"
    :op: 0x03
    :args:
      - :type: register
        :name: "destination"

  - :name: "Load VRAM[PX] into Rd"
    :desc: "VRAM[PX] -> Rd"
    :mnemonic: "lpx"
    :op: 0x04
    :args:
      - :type: register
        :name: "destination"

  - :name: "Store Rs into VRAM[PX]"
    :desc: "Rs -> VRAM[PX]"
    :mnemonic: "spx"
    :op: 0x05
    :args:
      - :type: register
        :name: "source"

  - :name: "Writes value in Rs to port Pd"
    :desc: "Rs -> Pd"
    :mnemonic: "out"
    :op: 0x06
    :args:
      - :type: register
        :name: "source"

      - :type: port
        :name: "destination"

  - :name: "Reads Ps value into Rd"
    :desc: "Ps -> Rd"
    :mnemonic: "in"
    :op: 0x07
    :args:
      - :type: port
        :name: "source"

      - :type: register
        :name: "destination"

  - :name: "Store RAM[DP] into Rs"
    :desc: "RAM[DP] -> Rs"
    :mnemonic: "str"
    :op: 0x08
    :args:
      - :type: register
        :name: "source"

  # Stack operations
  - :name: "Push register Rs onto stack"
    :desc: "Rs -> RAM[SP], SP--"
    :mnemonic: "push"
    :op: 0x09
    :args:
      - :type: register
        :name: "source"

  - :name: "Pop stack contents into register Rd"
    :desc: "RAM[SP] -> Rd, SP++"
    :mnemonic: "pop"
    :op: 0x0A
    :args:
      - :type: register
        :name: "destination"

  # Arithmetic and logic operations
  - :name: "Add registers"
    :desc: "Rd = Rd + Rs"
    :mnemonic: "add"
    :op: 0x0B
    :args:
      - :type: register
        :name: "destination"

      - :type: register
        :name: "source"

  - :name: "Subtract registers"
    :desc: "Rd = Rd - Rs"
    :mnemonic: "sub"
    :op: 0x0C
    :args:
      - :type: register
        :name: "destination"

      - :type: register
        :name: "source"

  - :name: "Compare registers"
    :mnemonic: "cmp"
    :op: 0x0D
    :args:
      - :type: register
        :name: "register a"

      - :type: register
        :name: "register b"

  - :name: "AND registers"
    :desc: "Rd = Rd & Rs"
    :mnemonic: "and"
    :op: 0x0E
    :args:
      - :type: register
        :name: "destination"

      - :type: register
        :name: "source"

  - :name: "OR registers"
    :desc: "Rd = Rd | Rs"
    :mnemonic: "or"
    :op: 0x0F
    :args:
      - :type: register
        :name: "destination"

      - :type: register
        :name: "source"

  - :name: "XOR registers"
    :desc: "Rd = Rd ^ Rs"
    :mnemonic: "xor"
    :op: 0x10
    :args:
      - :type: register
        :name: "destination"

      - :type: register
        :name: "source"

  - :name: "Shift left"
    :desc: "Shifts Rd left in place"
    :mnemonic: "shl"
    :op: 0x11
    :args:
      - :type: register
        :name: "destination"

  - :name: "Shift right"
    :desc: "Shifts Rd right in place"
    :mnemonic: "shr"
    :op: 0x12
    :args:
      - :type: register
        :name: "destination"

  # Branching operations
  - :name: "Jump"
    :desc: "Jump to address in Ra"
    :mnemonic: "jmp"
    :op: 0x13
    :args:
      - :type: register
        :name: "target address"

  - :name: "Branch if =="
    :desc: "Branch if equal to address in Ra"
    :mnemonic: "breq"
    :op: 0x14
    :args:
      - :type: register
        :name: "target address"

  - :name: "Branch if !="
    :desc: "Branch if not equal to address in Ra"
    :mnemonic: "brne"
    :op: 0x15
    :args:
      - :type: register
        :name: "target address"

  - :name: "Branch if >"
    :desc: "Branch if greater than to address in Ra"
    :mnemonic: "brgt"
    :op: 0x16
    :args:
      - :type: register
        :name: "target address"

  - :name: "Branch if >="
    :desc: "Branch if greater than or equal to address in Ra"
    :mnemonic: "brge"
    :op: 0x17
    :args:
      - :type: register
        :name: "target address"

  - :name: "Branch if <"
    :desc: "Branch if less than to address in Ra"
    :mnemonic: "brlt"
    :op: 0x18
    :args:
      - :type: register
        :name: "target address"

  - :name: "Branch if <="
    :desc: "Branch if less than or equal to address in Ra"
    :mnemonic: "brle"
    :op: 0x19
    :args:
      - :type: register
        :name: "target address"

  - :name: "Call"
    :desc: "Push IP onto stack, and jump to address in Ra"
    :mnemonic: "call"
    :op: 0x1A
    :args:
      - :type: register
        :name: "target address"

  - :name: "Return"
    :desc: "Alias for pop IP"
    :mnemonic: "ret"
    :op: 0x1B
